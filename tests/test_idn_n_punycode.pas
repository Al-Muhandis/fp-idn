unit test_idn_n_punycode;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, fpcunit, testregistry;

type
  { TTestPunycode }
  TTestPunycode = class(TTestCase)
  private
    procedure AssertEncodeDecode(const aTestName, aInput, ExpectedPunycode: string);
    procedure AssertRoundTrip(const aTestName, aInput: string);
  published
    // Basic encoding/decoding tests
    procedure TestRussianDomain;
    procedure TestChineseCharacters;
    procedure TestArabicText;
    procedure TestGermanUmlaut;
    procedure TestJapaneseText;
    procedure TestMixedContent;
    // Edge cases
    procedure TestEmptyString;
    procedure TestSingleCharacter;
    procedure TestLongString;
    procedure TestOnlyNonASCII;
    // Special cases
    procedure TestSpecialCharacters;
    procedure TestNumbersAndSymbols;
    procedure TestCaseInsensitive;
    // Error handling tests
    procedure TestInvalidPunycode;
    procedure TestCorruptedData;
    // Performance tests
    procedure TestLargeData;
    // Real-world domain examples
    procedure TestRealWorldDomains;
    procedure TestDisallowedCharacters;
    procedure TestMalformedStructure;
    procedure TestDeterministicEncoding;

  end;

  { TTestIDN }

  TTestIDN = class(TTestCase)
  published
    procedure TestPureASCII;
    procedure TestRussianIDN;
    procedure TestMixedDomain;
    procedure TestSubdomains;
    procedure TestRealDomain;
    procedure TestEmptyInput;
  end;

implementation

uses
  fppunycode, fpidn
  ;

procedure TTestPunycode.AssertEncodeDecode(const aTestName, aInput, ExpectedPunycode: string);
var
  aEncoded, aDecoded: string;
begin
  aEncoded := UTF8ToPunycode(aInput);
  AssertEquals(aTestName + ': encoding mismatch', ExpectedPunycode, aEncoded);
  aDecoded := PunycodeToUTF8(aEncoded);
  AssertEquals(aTestName, aInput, aDecoded);
end;

procedure TTestPunycode.AssertRoundTrip(const aTestName, aInput: string);
var
  aEncoded, aDecoded: string;
begin
  aEncoded := UTF8ToPunycode(aInput);
  aDecoded := PunycodeToUTF8(aEncoded);
  AssertEquals(Format('%s: data changed after round-trip', [aTestName]), aInput, aDecoded);
end;

procedure TTestPunycode.TestRussianDomain;
begin
  // Test Cyrillic characters
  AssertRoundTrip('Cyrillic word', '–ø—Ä–∏–º–µ—Ä');
  AssertRoundTrip('Test', '–∏—Å–ø—ã—Ç–∞–Ω–∏–µ');

  // Known results
  AssertEncodeDecode('Test', '—Ç–µ—Å—Ç', 'e1aybc');
end;

procedure TTestPunycode.TestChineseCharacters;
begin
  // Chinese characters
  AssertRoundTrip('China', '‰∏≠ÂõΩ');
  AssertRoundTrip('Chinese text', '‰∏≠ÊñáÂüüÂêç');
end;

procedure TTestPunycode.TestArabicText;
begin
  // Arabic text
  AssertRoundTrip('Arabic', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©');
  AssertRoundTrip('Arabic domain', 'ŸÖÿ´ÿßŸÑ');
end;

procedure TTestPunycode.TestGermanUmlaut;
begin
  // German characters with umlauts
  AssertRoundTrip('M√ºnchen', 'M√ºnchen');
  AssertRoundTrip('B√ºcher', 'B√ºcher');
end;

procedure TTestPunycode.TestJapaneseText;
begin
  // Japanese Character
  AssertRoundTrip('Japan', 'Êó•Êú¨');
  AssertRoundTrip('Japanese text', '„Éâ„É°„Ç§„É≥Âêç‰æã');
end;

procedure TTestPunycode.TestMixedContent;
begin
  // Mixed content: ASCII + Unicode
  AssertRoundTrip('Mixed 1', 'hello‰∏ñÁïå');
  AssertRoundTrip('Mixed 2', '—Ç–µ—Å—Ç-123');
  AssertRoundTrip('Mixed 3', 'example‰∏≠Êñá');
end;

procedure TTestPunycode.TestEmptyString;
begin
  // Empty string
  AssertEncodeDecode('Empty string', '', '');
end;

procedure TTestPunycode.TestSingleCharacter;
begin
  // Single character cases
  AssertRoundTrip('One cyrillic character', '–∞');
  AssertRoundTrip('One chinese character', '‰∏≠');
end;

procedure TTestPunycode.TestLongString;
var
  aLongRussian: String;
  i: Integer;
begin
  // Long string
  aLongRussian := EmptyStr;
  for i := 1 to 100 do
    aLongRussian+='—Ç–µ—Å—Ç';

  AssertRoundTrip('Long string', aLongRussian);
end;

procedure TTestPunycode.TestOnlyNonASCII;
begin
  // Only non-ASCII characters
  AssertRoundTrip('Only cyrillic', '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è');
  AssertRoundTrip('Only chinese', '‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πùÂçÅ');
end;

procedure TTestPunycode.TestSpecialCharacters;
begin
  // Special Unicode characters
  AssertRoundTrip('Currency symbols', '‚Ç¨¬£¬•‚ÇΩ');
  AssertRoundTrip('Mathematical symbols', '‚àë‚àè‚à´‚àÜ');
  AssertRoundTrip('Emoji', 'üòÄüòÉüòÑüòÅ');
end;

procedure TTestPunycode.TestNumbersAndSymbols;
begin
  // Numbers and symbols mixed
  AssertRoundTrip('Digits with Cyrillic', '—Ç–µ—Å—Ç123');
  AssertRoundTrip('Symbols with Chinese', '‰∏≠ÂõΩ-test');
end;

procedure TTestPunycode.TestCaseInsensitive;
var
  aLower, aUpper, aCombined: string;
begin
  // Test case insensitivity of Punycode
  aLower := UTF8ToPunycode('—Ç–µ—Å—Ç');
  aUpper := UTF8ToPunycode('–¢–ï–°–¢');  
  aCombined := UTF8ToPunycode('–¢–µ—Å—Ç');

  // All must be converted correctly
  AssertEquals('Lowercase', '—Ç–µ—Å—Ç', PunycodeToUTF8(aLower));
  AssertEquals('Uppercase', '–¢–ï–°–¢', PunycodeToUTF8(aUpper));
  AssertEquals('Capitalized', '–¢–µ—Å—Ç', PunycodeToUTF8(aCombined));
end;

procedure TTestPunycode.TestInvalidPunycode;
var
  aInvalidResult: string;
begin
  // Invalid punycode string test
  aInvalidResult := PunycodeToUTF8('invalid-punycode-string');
  // The main point is the function should not raise exceptions
  AssertTrue('The function must execute without errors', aInvalidResult <> EmptyStr);
end;

procedure TTestPunycode.TestCorruptedData;
var
  {%H-}Result1, {%H-}Result2: string;
begin
  // Corrupted data test
  Result1 := PunycodeToUTF8('xn--');
  Result2 := PunycodeToUTF8('xn--invalid');

  // should not raise exceptions
  AssertTrue('Correpted data processed', True);
end;

procedure TTestPunycode.TestLargeData;
var
  aLargeString: string;
  i: Integer;
begin
  // Big data test
  aLargeString := '';
  for i := 1 to 1000 do
    aLargeString := aLargeString + '—Ç–µ—Å—Ç' + IntToStr(i) + 'test';

  AssertRoundTrip('Big data', aLargeString);
end;

procedure TTestPunycode.TestRealWorldDomains;
begin
  // Real-world examples of internationalized domain names
  AssertRoundTrip('Wikipedia', '–≤–∏–∫–∏–ø–µ–¥–∏—è'); // –≤–∏–∫–∏–ø–µ–¥–∏—è.org
  AssertRoundTrip('Mail', '–ø–æ—á—Ç–∞'); // –ø–æ—á—Ç–∞.—Ä—Ñ
end;

procedure TTestPunycode.TestDisallowedCharacters;
begin
  AssertEquals('Corrupted character (cyrillic)', EmptyStr, PunycodeToUTF8('–ø—Ä–∏–º–µ—Ä'));
  AssertEquals('Corrupted character (%)', EmptyStr, PunycodeToUTF8('ab%cd'));
end;

procedure TTestPunycode.TestMalformedStructure;
begin
  AssertEquals('Only delimiter', EmptyStr, PunycodeToUTF8('-'));
end;

procedure TTestPunycode.TestDeterministicEncoding;
begin
  AssertEquals('Deterministic encoding', UTF8ToPunycode('–ø—Ä–∏–º–µ—Ä'), UTF8ToPunycode('–ø—Ä–∏–º–µ—Ä'));
end;

{ TTestIDN }

procedure TTestIDN.TestPureASCII;
begin
  AssertEquals('Pure ASCII domain remains unchanged',
               'example.com', UnicodeToIDN('example.com'));
  AssertEquals('Pure ASCII domain round-trip',
               'example.com', IDNToUnicode('example.com'));
end;

procedure TTestIDN.TestRussianIDN;
begin
  AssertEquals('Russian domain to IDN',
               'xn--e1afmkfd.xn--p1ai', UnicodeToIDN('–ø—Ä–∏–º–µ—Ä.—Ä—Ñ'));
  AssertEquals('Russian domain to Unicode',
               '–ø—Ä–∏–º–µ—Ä.—Ä—Ñ', IDNToUnicode('xn--e1afmkfd.xn--p1ai'));
end;

procedure TTestIDN.TestMixedDomain;
begin
  AssertEquals('Mixed domain to IDN',
               'xn--mnchen-3ya.com', UnicodeToIDN('m√ºnchen.com'));
  AssertEquals('Mixed domain to Unicode',
               'm√ºnchen.com', IDNToUnicode('xn--mnchen-3ya.com'));
end;

procedure TTestIDN.TestSubdomains;
begin
  AssertEquals('Subdomain with IDN', 'mail.xn--80a1acny', UnicodeToIDN('mail.–ø–æ—á—Ç–∞'));
  AssertEquals('Subdomain Unicode', 'mail.–æ–Ω–ª–∞–π–Ω', IDNToUnicode('mail.xn--80asehdb'));
end;

procedure TTestIDN.TestRealDomain;
begin
  AssertEquals('Real .org domain', 'xn--d1acufc.xn--p1ai', UnicodeToIDN('–¥–æ–º–µ–Ω.—Ä—Ñ'));
  AssertEquals('Real .org domain decoded',
               '–¥–æ–º–µ–Ω.—Ä—Ñ', IDNToUnicode('xn--d1acufc.xn--p1ai'));
end;

procedure TTestIDN.TestEmptyInput;
begin
  AssertEquals('Empty input to IDN', '', UnicodeToIDN(''));
  AssertEquals('Empty input from IDN', '', IDNToUnicode(''));
end;

initialization

  RegisterTest(TTestPunycode);  
  RegisterTest(TTestIDN);
end.

